// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';
// sample-metadata:
//   title: DlpService redactImage Sample
//   description:  Redacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
//   generated: true
//   api: dlp_service
//   api_version: v2
//   rpcName: dlpService.redactImage

function main() {
  // [START dlp_v2_generated_DlpService_RedactImage_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The parent resource name, for example projects/my-project-id.
   */
  // const parent = 'abc123'
  /**
   *  The geographic location to process the request. Reserved for future
   *  extensions.
   */
  // const locationId = 'abc123'
  /**
   *  Configuration for the inspector.
   */
  // const inspectConfig = ''
  /**
   *  The configuration for specifying what content to redact from images.
   */
  // const imageRedactionConfigs = 1234
  /**
   *  Whether the response should include findings along with the redacted
   *  image.
   */
  // const includeFindings = true
  /**
   *  The content must be PNG, JPEG, SVG or BMP.
   */
  // const byteItem = ''

  // Imports the Dlp library
  const {DlpServiceClient} = require('dlp').v2;

  // Instantiates a client
  const dlpClient = new DlpServiceClient();

  async function redactImage() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await dlpClient.redactImage(request);
    console.log(response);
  }

  redactImage();
  // [END dlp_v2_generated_DlpService_RedactImage_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
