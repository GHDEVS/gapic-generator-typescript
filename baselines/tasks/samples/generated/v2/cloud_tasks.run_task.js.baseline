// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';
// sample-metadata:
//   title: CloudTasks runTask Sample
//   description:  Forces a task to run now. When this method is called, Cloud Tasks will dispatch the task, even if the task is already running, the queue has reached its RateLimits google.cloud.tasks.v2.RateLimits or is PAUSED google.cloud.tasks.v2.Queue.State.PAUSED. This command is meant to be used for manual debugging. For example, RunTask google.cloud.tasks.v2.CloudTasks.RunTask can be used to retry a failed task after a fix has been made or to manually force a task to be dispatched now. The dispatched task is returned. That is, the task that is returned contains the status Task.status after the task is dispatched but before the task is received by its target. If Cloud Tasks receives a successful response from the task&#39;s target, then the task will be deleted; otherwise the task&#39;s schedule_time google.cloud.tasks.v2.Task.schedule_time will be reset to the time that RunTask google.cloud.tasks.v2.CloudTasks.RunTask was called plus the retry delay specified in the queue's RetryConfig google.cloud.tasks.v2.RetryConfig. RunTask google.cloud.tasks.v2.CloudTasks.RunTask returns NOT_FOUND google.rpc.Code.NOT_FOUND when it is called on a task that has already succeeded or permanently failed.
//   generated: true
//   api: cloud_tasks
//   api_version: v2
//   rpcName: cloudTasks.runTask

function main(name) {
  // [START cloudtasks_v2_generated_CloudTasks_RunTask_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The task name. For example:
   *  `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`
   */
  // const name = 'abc123'
  /**
   *  The response_view specifies which subset of the Task google.cloud.tasks.v2.Task  will be
   *  returned.
   *  By default response_view is BASIC google.cloud.tasks.v2.Task.View.BASIC; not all
   *  information is retrieved by default because some data, such as
   *  payloads, might be desirable to return only when needed because
   *  of its large size or because of the sensitivity of data that it
   *  contains.
   *  Authorization for FULL google.cloud.tasks.v2.Task.View.FULL  requires
   *  `cloudtasks.tasks.fullView` Google IAM (https://cloud.google.com/iam/)
   *  permission on the Task google.cloud.tasks.v2.Task  resource.
   */
  // const responseView = ''

  // Imports the Tasks library
  const {CloudTasksClient} = require('tasks').v2;

  // Instantiates a client
  const tasksClient = new CloudTasksClient();

  async function runTask() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const response = await tasksClient.runTask(request);
    console.log(response);
  }

  runTask();
  // [END cloudtasks_v2_generated_CloudTasks_RunTask_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
