// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';
// sample-metadata:
//   title: KeyManagementService asymmetricSign Sample
//   description:  Signs data using a CryptoKeyVersion google.cloud.kms.v1.CryptoKeyVersion with CryptoKey.purpose google.cloud.kms.v1.CryptoKey.purpose ASYMMETRIC_SIGN, producing a signature that can be verified with the public key retrieved from GetPublicKey google.cloud.kms.v1.KeyManagementService.GetPublicKey.
//   generated: true
//   api: key_management_service
//   api_version: v1
//   rpcName: keyManagementService.asymmetricSign

function main() {
  // [START cloudkms_v1_generated_KeyManagementService_AsymmetricSign_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the CryptoKeyVersion google.cloud.kms.v1.CryptoKeyVersion  to use for signing.
   */
  // const name = 'abc123'
  /**
   *  Required. The digest of the data to sign. The digest must be produced with
   *  the same digest algorithm as specified by the key version's
   *  algorithm google.cloud.kms.v1.CryptoKeyVersion.algorithm.
   */
  // const digest = ''

  // Imports the Kms library
  const {KeyManagementServiceClient} = require('kms').v1;

  // Instantiates a client
  const kmsClient = new KeyManagementServiceClient();

  async function asymmetricSign() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await kmsClient.asymmetricSign(request);
    console.log(response);
  }

  asymmetricSign();
  // [END cloudkms_v1_generated_KeyManagementService_AsymmetricSign_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
