// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';
// sample-metadata:
//   title: KeyManagementService restoreCryptoKeyVersion Sample
//   description:  Restore a CryptoKeyVersion google.cloud.kms.v1.CryptoKeyVersion in the DESTROY_SCHEDULED google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DESTROY_SCHEDULED state. Upon restoration of the CryptoKeyVersion, state google.cloud.kms.v1.CryptoKeyVersion.state will be set to DISABLED google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionState.DISABLED, and destroy_time google.cloud.kms.v1.CryptoKeyVersion.destroy_time will be cleared.
//   generated: true
//   api: key_management_service
//   api_version: v1
//   rpcName: keyManagementService.restoreCryptoKeyVersion

function main() {
  // [START cloudkms_v1_generated_KeyManagementService_RestoreCryptoKeyVersion_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The resource name of the CryptoKeyVersion google.cloud.kms.v1.CryptoKeyVersion  to restore.
   */
  // const name = 'abc123'

  // Imports the Kms library
  const {KeyManagementServiceClient} = require('kms').v1;

  // Instantiates a client
  const kmsClient = new KeyManagementServiceClient();

  async function restoreCryptoKeyVersion() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await kmsClient.restoreCryptoKeyVersion(request);
    console.log(response);
  }

  restoreCryptoKeyVersion();
  // [END cloudkms_v1_generated_KeyManagementService_RestoreCryptoKeyVersion_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
