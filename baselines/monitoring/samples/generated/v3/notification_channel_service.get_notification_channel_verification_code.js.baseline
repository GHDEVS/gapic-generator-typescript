// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';
// sample-metadata:
//   title: monitoring getNotificationChannelVerificationCode Sample
//   description:  Requests a verification code for an already verified channel that can then be used in a call to VerifyNotificationChannel() on a different channel with an equivalent identity in the same or in a different project. This makes it possible to copy a channel between projects without requiring manual reverification of the channel. If the channel is not in the verified state, this method will fail (in other words, this may only be used if the SendNotificationChannelVerificationCode and VerifyNotificationChannel paths have already been used to put the given channel into the verified state). There is no guarantee that the verification codes returned by this method will be of a similar structure or form as the ones that are delivered to the channel via SendNotificationChannelVerificationCode; while VerifyNotificationChannel() will recognize both the codes delivered via SendNotificationChannelVerificationCode() and returned from GetNotificationChannelVerificationCode(), it is typically the case that the verification codes delivered via SendNotificationChannelVerificationCode() will be shorter and also have a shorter expiration (e.g. codes such as &quot;G-123456&quot;) whereas GetVerificationCode() will typically return a much longer, websafe base 64 encoded string that has a longer expiration time.
//   generated: true
//   api: notification_channel_service
//   api_version: v3
//   rpcName: notificationChannelService.getNotificationChannelVerificationCode

function main(name) {
  // [START monitoring_v3_generated_NotificationChannelService_GetNotificationChannelVerificationCode_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The notification channel for which a verification code is to be generated
   *  and retrieved. This must name a channel that is already verified; if
   *  the specified channel is not verified, the request will fail.
   */
  // const name = 'abc123'
  /**
   *  The desired expiration time. If specified, the API will guarantee that
   *  the returned code will not be valid after the specified timestamp;
   *  however, the API cannot guarantee that the returned code will be
   *  valid for at least as long as the requested time (the API puts an upper
   *  bound on the amount of time for which a code may be valid). If omitted,
   *  a default expiration will be used, which may be less than the max
   *  permissible expiration (so specifying an expiration may extend the
   *  code's lifetime over omitting an expiration, even though the API does
   *  impose an upper limit on the maximum expiration that is permitted).
   */
  // const expireTime = ''

  // Imports the Monitoring library
  const {NotificationChannelServiceClient} = require('monitoring').v3;

  // Instantiates a client
  const monitoringClient = new NotificationChannelServiceClient();

  async function getNotificationChannelVerificationCode() {
    // Construct request
    const request = {
      name,
    };

    // Run request
    const response = await monitoringClient.getNotificationChannelVerificationCode(request);
    console.log(response);
  }

  getNotificationChannelVerificationCode();
  // [END monitoring_v3_generated_NotificationChannelService_GetNotificationChannelVerificationCode_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
