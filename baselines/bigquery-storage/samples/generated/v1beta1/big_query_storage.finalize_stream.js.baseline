// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';
// sample-metadata:
//   title: BigQueryStorage finalizeStream Sample
//   description:  Triggers the graceful termination of a single stream in a ReadSession. This API can be used to dynamically adjust the parallelism of a batch processing task downwards without losing data. This API does not delete the stream -- it remains visible in the ReadSession, and any data processed by the stream is not released to other streams. However, no additional data will be assigned to the stream once this call completes. Callers must continue reading data on the stream until the end of the stream is reached so that data which has already been assigned to the stream will be processed. This method will return an error if there are no other live streams in the Session, or if SplitReadStream() has been called on the given Stream.
//   generated: true
//   api: big_query_storage
//   api_version: v1beta1
//   rpcName: bigQueryStorage.finalizeStream

function main() {
  // [START bigquerystorage_v1beta1_generated_BigQueryStorage_FinalizeStream_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Stream to finalize.
   */
  // const stream = ''

  // Imports the Storage library
  const {BigQueryStorageClient} = require('storage').v1beta1;

  // Instantiates a client
  const storageClient = new BigQueryStorageClient();

  async function finalizeStream() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await storageClient.finalizeStream(request);
    console.log(response);
  }

  finalizeStream();
  // [END bigquerystorage_v1beta1_generated_BigQueryStorage_FinalizeStream_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
