// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


'use strict';
// sample-metadata:
//   title: BigQueryStorage splitReadStream Sample
//   description:  Splits a given read stream into two Streams. These streams are referred to as the primary and the residual of the split. The original stream can still be read from in the same manner as before. Both of the returned streams can also be read from, and the total rows return by both child streams will be the same as the rows read from the original stream. Moreover, the two child streams will be allocated back to back in the original Stream. Concretely, it is guaranteed that for streams Original, Primary, and Residual, that Original0-j = Primary0-j and Originalj-n = Residual0-m once the streams have been read to completion. This method is guaranteed to be idempotent.
//   generated: true
//   api: big_query_storage
//   api_version: v1beta1
//   rpcName: bigQueryStorage.splitReadStream

function main() {
  // [START bigquerystorage_v1beta1_generated_BigQueryStorage_SplitReadStream_async]
  /**
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Stream to split.
   */
  // const originalStream = ''
  /**
   *  A value in the range (0.0, 1.0) that specifies the fractional point at
   *  which the original stream should be split. The actual split point is
   *  evaluated on pre-filtered rows, so if a filter is provided, then there is
   *  no guarantee that the division of the rows between the new child streams
   *  will be proportional to this fractional value. Additionally, because the
   *  server-side unit for assigning data is collections of rows, this fraction
   *  will always map to to a data storage boundary on the server side.
   */
  // const fraction = 1234

  // Imports the Storage library
  const {BigQueryStorageClient} = require('storage').v1beta1;

  // Instantiates a client
  const storageClient = new BigQueryStorageClient();

  async function splitReadStream() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await storageClient.splitReadStream(request);
    console.log(response);
  }

  splitReadStream();
  // [END bigquerystorage_v1beta1_generated_BigQueryStorage_SplitReadStream_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
